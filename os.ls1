A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     1


MACRO ASSEMBLER A51 V8.02b
OBJECT MODULE PLACED IN os.OBJ
ASSEMBLER INVOKED BY: D:\c51\c51v952\C51\BIN\A51.EXE os.src PR(.\os.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\os.SRC generated from: os.c
                       2     ; COMPILER INVOKED BY:
                       3     ;        D:\c51\c51v952\C51\BIN\C51.EXE os.c BROWSE DEBUG OBJECTEXTEND TABS(2) SRC(.\os.SRC
                             )
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    OS
                       8     
  0080                 9     P0      DATA    080H
  0090                10     P1      DATA    090H
  00A0                11     P2      DATA    0A0H
  00B0                12     P3      DATA    0B0H
  00B4                13     T0      BIT     0B0H.4
  00D6                14     AC      BIT     0D0H.6
  00B5                15     T1      BIT     0B0H.5
  0090                16     T2      BIT     090H.0
  00AF                17     EA      BIT     0A8H.7
  00A8                18     IE      DATA    0A8H
  00CE                19     EXF2    BIT     0C8H.6
  00B7                20     RD      BIT     0B0H.7
  00AC                21     ES      BIT     0A8H.4
  00B8                22     IP      DATA    0B8H
  0098                23     RI      BIT     098H.0
  00B2                24     INT0    BIT     0B0H.2
  00D7                25     CY      BIT     0D0H.7
  0099                26     TI      BIT     098H.1
  00B3                27     INT1    BIT     0B0H.3
  00CB                28     RCAP2H  DATA    0CBH
  00BC                29     PS      BIT     0B8H.4
  0081                30     SP      DATA    081H
  0091                31     T2EX    BIT     090H.1
  00D2                32     OV      BIT     0D0H.2
  00CA                33     RCAP2L  DATA    0CAH
  00C9                34     C_T2    BIT     0C8H.1
  00B6                35     WR      BIT     0B0H.6
  00CD                36     RCLK    BIT     0C8H.5
  00CC                37     TCLK    BIT     0C8H.4
  0099                38     SBUF    DATA    099H
  0087                39     PCON    DATA    087H
  0098                40     SCON    DATA    098H
  0089                41     TMOD    DATA    089H
  0088                42     TCON    DATA    088H
  0089                43     IE0     BIT     088H.1
  008B                44     IE1     BIT     088H.3
  00F0                45     B       DATA    0F0H
  00C8                46     CP_RL2  BIT     0C8H.0
  00E0                47     ACC     DATA    0E0H
  00A9                48     ET0     BIT     0A8H.1
  00AB                49     ET1     BIT     0A8H.3
  008D                50     TF0     BIT     088H.5
  00AD                51     ET2     BIT     0A8H.5
  008F                52     TF1     BIT     088H.7
  00CF                53     TF2     BIT     0C8H.7
  009A                54     RB8     BIT     098H.2
  008C                55     TH0     DATA    08CH
  00A8                56     EX0     BIT     0A8H.0
  0088                57     IT0     BIT     088H.0
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     2

  008D                58     TH1     DATA    08DH
  009B                59     TB8     BIT     098H.3
  00AA                60     EX1     BIT     0A8H.2
  008A                61     IT1     BIT     088H.2
  00CD                62     TH2     DATA    0CDH
  00D0                63     P       BIT     0D0H.0
  009F                64     SM0     BIT     098H.7
  008A                65     TL0     DATA    08AH
  009E                66     SM1     BIT     098H.6
  008B                67     TL1     DATA    08BH
  009D                68     SM2     BIT     098H.5
  00CC                69     TL2     DATA    0CCH
  00B9                70     PT0     BIT     0B8H.1
  00BB                71     PT1     BIT     0B8H.3
  00D3                72     RS0     BIT     0D0H.3
  00BD                73     PT2     BIT     0B8H.5
  008C                74     TR0     BIT     088H.4
  00D4                75     RS1     BIT     0D0H.4
  008E                76     TR1     BIT     088H.6
  00CA                77     TR2     BIT     0C8H.2
  00B8                78     PX0     BIT     0B8H.0
  00BA                79     PX1     BIT     0B8H.2
  0083                80     DPH     DATA    083H
  0082                81     DPL     DATA    082H
  00CB                82     EXEN2   BIT     0C8H.3
  009C                83     REN     BIT     098H.4
  00C8                84     T2CON   DATA    0C8H
  00B0                85     RXD     BIT     0B0H.0
  00B1                86     TXD     BIT     0B0H.1
  00D5                87     F0      BIT     0D0H.5
  00D0                88     PSW     DATA    0D0H
                      89     ?PR?OS_Main?OS       SEGMENT CODE 
                      90     ?PR?OS_taskDispatch?OS                   SEGMENT CODE 
                      91     ?PR?OS_TaskRecover?OS                    SEGMENT CODE 
                      92     ?PR?_sleep?OS        SEGMENT CODE 
                      93     ?PR?_addTask?OS      SEGMENT CODE 
                      94             EXTRN   CODE (addTasks)
                      95             EXTRN   CODE (?C?OFFXADD)
                      96             EXTRN   CODE (?C?CSTPTR)
                      97             PUBLIC  RN_TASK_IDX
                      98             PUBLIC  Cache_TaskEnter_L
                      99             PUBLIC  Cache_TaskEnter_H
                     100             PUBLIC  i
                     101             PUBLIC  pTAK_RM_STK
                     102             PUBLIC  p_JCB
                     103             PUBLIC  ITRPT_COUNT
                     104             PUBLIC  Cache_ACC
                     105             PUBLIC  _addTask
                     106             PUBLIC  _sleep
                     107             PUBLIC  OS_TaskRecover
                     108             PUBLIC  OS_taskDispatch
                     109             PUBLIC  OS_Main
                     110     
----                 111             DSEG  AT  040H
0040                 112           Cache_ACC:   DS   1
                     113     
----                 114             DSEG  AT  031H
0031                 115         ITRPT_COUNT:   DS   1
                     116     
----                 117             DSEG  AT  034H
0034                 118               p_JCB:   DS   1
                     119     
----                 120             DSEG  AT  032H
0032                 121         pTAK_RM_STK:   DS   2
                     122     
----                 123             DSEG  AT  043H
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     3

0043                 124                   i:   DS   1
                     125     
----                 126             DSEG  AT  042H
0042                 127     Cache_TaskEnter_H:   DS   1
                     128     
----                 129             DSEG  AT  041H
0041                 130     Cache_TaskEnter_L:   DS   1
                     131     
----                 132             DSEG  AT  030H
0030                 133         RN_TASK_IDX:   DS   1
                     134     ; #include "os.h"
                     135     ; 
                     136     ; uchar RN_TASK_IDX _at_ 0x30;            //当前任务下标
                     137     ; uchar ITRPT_COUNT _at_ 0x31;                  //中断次数
                     138     ; uchar xdata *pTAK_RM_STK _at_ 0x32;//任务RAM栈指针       
                     139     ; uchar data *p_JCB _at_ 0x34;            //JCB地址栈指针
                     140     ; 
                     141     ; #define C_MAX_TASK_COUNT 0x04               //最多任务数
                     142     ; #define C_JCB_START 0x50                    //JCB起始地址
                     143     ; #define C_TASKs_RAM_START 0x0000      //任务RAM起始地址 
                     144     ; #define C_sgTASK_SP_SRART 0x80                //任务栈数据起始地址
                     145     ; #define C_MAIN_SP_START 0x70                  //默认栈数据起始地址
                     146     ; #define C_JCB_CAPACITY 0x08         //JCB容量
                     147     ; #define C_TASKs_RAM_CAPACITY 0x20 //单个任务最大容量
                     148     ; #define C_sgTASK_SP_CAPACITY 0x20     //单个任务栈最大容量
                     149     ; 
                     150     ; #define JCB_DESTORY 0x00
                     151     ; #define JCB_BLOCK 0x01
                     152     ; #define JCB_RUN 0x02
                     153     ; 
                     154     ; uchar data Cache_ACC _at_ 0x40;        //ACC临时变量
                     155     ; uchar data Cache_TaskEnter_L _at_ 0x41;//任务人口地址L临时变量
                     156     ; uchar data Cache_TaskEnter_H _at_ 0x42;//任务人口地址H临时变量
                     157     ; uchar data i _at_ 0x43;                //临时变量i
                     158     ; 
                     159     ; extern void addTasks();
                     160     ; extern void pushTaskData();
                     161     ; 
                     162     ; 
                     163     ; 
                     164     ; void OS_Main(){
                     165     
----                 166             RSEG  ?PR?OS_Main?OS
0000                 167     OS_Main:
                     168             USING   0
                     169                             ; SOURCE LINE # 31
                     170     ;       addTasks();
                     171                             ; SOURCE LINE # 32
0000 020000   F      172             LJMP    addTasks
                     173     ; END OF OS_Main
                     174     
                     175     ; }
                     176     ; 
                     177     ; 
                     178     ; void OS_taskDispatch(){
                     179     
----                 180             RSEG  ?PR?OS_taskDispatch?OS
0000                 181     OS_taskDispatch:
                     182             USING   0
                     183                             ; SOURCE LINE # 36
                     184     ; 
                     185     ;       //寄存器入栈保护 
                     186     ;       for(i=0x08;i<0x10;i++){         
                     187                             ; SOURCE LINE # 39
0000 754308          188             MOV     i,#08H
0003                 189     ?C0002:
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     4

                     190     ;               //MOV (C_TASKs_RAM_S + D_RN_TASK_IDX*C_sgTAK_RM_CT) + D_pTAK_RM_STK,A
                     191     ;               *((uchar xdata *)(C_TASKs_RAM_START + RN_TASK_IDX*C_TASKs_RAM_CAPACITY + pT
                             AK_RM_STK++)) = *((uchar data*)i);
                     192                             ; SOURCE LINE # 41
0003 A843            193             MOV     R0,i
0005 E6              194             MOV     A,@R0
0006 FF              195             MOV     R7,A
0007 0533            196             INC     pTAK_RM_STK+01H
0009 E533            197             MOV     A,pTAK_RM_STK+01H
000B AC32            198             MOV     R4,pTAK_RM_STK
000D 7002            199             JNZ     ?C0035
000F 0532            200             INC     pTAK_RM_STK
0011                 201     ?C0035:
0011 14              202             DEC     A
0012 F582            203             MOV     DPL,A
0014 8C83            204             MOV     DPH,R4
0016 75F020          205             MOV     B,#020H
0019 E530            206             MOV     A,RN_TASK_IDX
001B 120000   F      207             LCALL   ?C?OFFXADD
001E EF              208             MOV     A,R7
001F F0              209             MOVX    @DPTR,A
                     210     ;               
                     211     ;       }
                     212                             ; SOURCE LINE # 43
0020 0543            213             INC     i
0022 E543            214             MOV     A,i
0024 B410DC          215             CJNE    A,#010H,?C0002
0027                 216     ?C0003:
                     217     ;       
                     218     ;       //寻找下一个任务的下标
                     219     ;       i = 0;
                     220                             ; SOURCE LINE # 46
0027 E4              221             CLR     A
0028 F543            222             MOV     i,A
                     223     ;       for(p_JCB = C_JCB_START; p_JCB < C_JCB_START + C_MAX_TASK_COUNT * C_JCB_CAPACITY; p
                             _JCB += C_JCB_CAPACITY){             
                     224                             ; SOURCE LINE # 47
002A 753450          225             MOV     p_JCB,#050H
002D                 226     ?C0005:
002D E534            227             MOV     A,p_JCB
002F C3              228             CLR     C
0030 9470            229             SUBB    A,#070H
0032 502E            230             JNC     ?C0006
                     231     ;               if(*p_JCB  == JCB_BLOCK && i != RN_TASK_IDX){
                     232                             ; SOURCE LINE # 48
0034 A834            233             MOV     R0,p_JCB
0036 E6              234             MOV     A,@R0
0037 B4011E          235             CJNE    A,#01H,?C0008
003A E543            236             MOV     A,i
003C 6530            237             XRL     A,RN_TASK_IDX
003E 6018            238             JZ      ?C0008
                     239     ;                       //上一个任务变为阻塞状态
                     240     ;                       *((uchar data*)(C_JCB_START + RN_TASK_IDX * C_JCB_CAPACITY)) = JCB_
                             BLOCK;
                     241                             ; SOURCE LINE # 50
0040 E530            242             MOV     A,RN_TASK_IDX
0042 75F008          243             MOV     B,#08H
0045 A4              244             MUL     AB
0046 2450            245             ADD     A,#050H
0048 F8              246             MOV     R0,A
0049 7601            247             MOV     @R0,#01H
                     248     ;                       //下一任务变成运行态
                     249     ;                       RN_TASK_IDX = i;
                     250                             ; SOURCE LINE # 52
004B 854330          251             MOV     RN_TASK_IDX,i
                     252     ;                       *(p_JCB++) = JCB_RUN;                   
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     5

                     253                             ; SOURCE LINE # 53
004E AF34            254             MOV     R7,p_JCB
0050 0534            255             INC     p_JCB
0052 A807            256             MOV     R0,AR7
0054 7602            257             MOV     @R0,#02H
                     258     ;                       break;
                     259                             ; SOURCE LINE # 54
0056 800A            260             SJMP    ?C0006
                     261     ;               }       
                     262                             ; SOURCE LINE # 55
0058                 263     ?C0008:
                     264     ;               ++i;
                     265                             ; SOURCE LINE # 56
0058 0543            266             INC     i
                     267     ;       }
                     268                             ; SOURCE LINE # 57
005A 7408            269             MOV     A,#08H
005C 2534            270             ADD     A,p_JCB
005E F534            271             MOV     p_JCB,A
0060 80CB            272             SJMP    ?C0005
0062                 273     ?C0006:
                     274     ;       pTAK_RM_STK = C_TASKs_RAM_START + RN_TASK_IDX * C_TASKs_RAM_CAPACITY;//任务数据
                             栈指针    
                     275                             ; SOURCE LINE # 58
0062 75F020          276             MOV     B,#020H
0065 E530            277             MOV     A,RN_TASK_IDX
0067 A4              278             MUL     AB
0068 85F032          279             MOV     pTAK_RM_STK,B
006B F533            280             MOV     pTAK_RM_STK+01H,A
                     281     ;       //恢复ACC     
                     282     ;       Cache_ACC = *(pTAK_RM_STK++);
                     283                             ; SOURCE LINE # 60
006D 0533            284             INC     pTAK_RM_STK+01H
006F E533            285             MOV     A,pTAK_RM_STK+01H
0071 AE32            286             MOV     R6,pTAK_RM_STK
0073 7002            287             JNZ     ?C0036
0075 0532            288             INC     pTAK_RM_STK
0077                 289     ?C0036:
0077 14              290             DEC     A
0078 F582            291             MOV     DPL,A
007A 8E83            292             MOV     DPH,R6
007C E0              293             MOVX    A,@DPTR
007D F540            294             MOV     Cache_ACC,A
                     295     ;       //恢复PSW
                     296     ;       *((uchar*)PSW) = *(pTAK_RM_STK++) & 0xE7;
                     297                             ; SOURCE LINE # 62
007F 0533            298             INC     pTAK_RM_STK+01H
0081 E533            299             MOV     A,pTAK_RM_STK+01H
0083 AE32            300             MOV     R6,pTAK_RM_STK
0085 7002            301             JNZ     ?C0037
0087 0532            302             INC     pTAK_RM_STK
0089                 303     ?C0037:
0089 14              304             DEC     A
008A F582            305             MOV     DPL,A
008C 8E83            306             MOV     DPH,R6
008E E0              307             MOVX    A,@DPTR
008F 54E7            308             ANL     A,#0E7H
0091 A9D0            309             MOV     R1,PSW
0093 7A00            310             MOV     R2,#00H
0095 7B00            311             MOV     R3,#00H
0097 120000   F      312             LCALL   ?C?CSTPTR
                     313     ;       //获取入口地址
                     314     ;       //先从任务RAM中获取              
                     315     ;       Cache_TaskEnter_L = *(pTAK_RM_STK++);
                     316                             ; SOURCE LINE # 65
009A 0533            317             INC     pTAK_RM_STK+01H
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     6

009C E533            318             MOV     A,pTAK_RM_STK+01H
009E AE32            319             MOV     R6,pTAK_RM_STK
00A0 7002            320             JNZ     ?C0038
00A2 0532            321             INC     pTAK_RM_STK
00A4                 322     ?C0038:
00A4 14              323             DEC     A
00A5 F582            324             MOV     DPL,A
00A7 8E83            325             MOV     DPH,R6
00A9 E0              326             MOVX    A,@DPTR
00AA F541            327             MOV     Cache_TaskEnter_L,A
                     328     ;       Cache_TaskEnter_H = *(pTAK_RM_STK++);
                     329                             ; SOURCE LINE # 66
00AC 0533            330             INC     pTAK_RM_STK+01H
00AE E533            331             MOV     A,pTAK_RM_STK+01H
00B0 AE32            332             MOV     R6,pTAK_RM_STK
00B2 7002            333             JNZ     ?C0039
00B4 0532            334             INC     pTAK_RM_STK
00B6                 335     ?C0039:
00B6 14              336             DEC     A
00B7 F582            337             MOV     DPL,A
00B9 8E83            338             MOV     DPH,R6
00BB E0              339             MOVX    A,@DPTR
00BC F542            340             MOV     Cache_TaskEnter_H,A
                     341     ;       if(Cache_TaskEnter_L == 0x00 && Cache_TaskEnter_H == 0x00){
                     342                             ; SOURCE LINE # 67
00BE E541            343             MOV     A,Cache_TaskEnter_L
00C0 7016            344             JNZ     ?C0009
00C2 E542            345             MOV     A,Cache_TaskEnter_H
00C4 7012            346             JNZ     ?C0009
                     347     ;               //如果任务数据栈为空，则从JCB获取         
                     348     ;               Cache_TaskEnter_L = *(p_JCB++);
                     349                             ; SOURCE LINE # 69
00C6 AF34            350             MOV     R7,p_JCB
00C8 0534            351             INC     p_JCB
00CA A807            352             MOV     R0,AR7
00CC E6              353             MOV     A,@R0
00CD F541            354             MOV     Cache_TaskEnter_L,A
                     355     ;               Cache_TaskEnter_H = *(p_JCB++);         
                     356                             ; SOURCE LINE # 70
00CF AF34            357             MOV     R7,p_JCB
00D1 0534            358             INC     p_JCB
00D3 A807            359             MOV     R0,AR7
00D5 E6              360             MOV     A,@R0
00D6 F542            361             MOV     Cache_TaskEnter_H,A
                     362     ;       }       
                     363                             ; SOURCE LINE # 71
00D8                 364     ?C0009:
                     365     ;       //切换任务栈的起始地址
                     366     ;       //先从任务数据栈中获取
                     367     ;       SP = *(pTAK_RM_STK++);
                     368                             ; SOURCE LINE # 74
00D8 0533            369             INC     pTAK_RM_STK+01H
00DA E533            370             MOV     A,pTAK_RM_STK+01H
00DC AE32            371             MOV     R6,pTAK_RM_STK
00DE 7002            372             JNZ     ?C0040
00E0 0532            373             INC     pTAK_RM_STK
00E2                 374     ?C0040:
00E2 14              375             DEC     A
00E3 F582            376             MOV     DPL,A
00E5 8E83            377             MOV     DPH,R6
00E7 E0              378             MOVX    A,@DPTR
00E8 F581            379             MOV     SP,A
                     380     ;       if(SP == 0){
                     381                             ; SOURCE LINE # 75
00EA E581            382             MOV     A,SP
00EC 700A            383             JNZ     ?C0010
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     7

                     384     ;               //如果任务数据栈为空，则设置为初始任务栈地址
                     385     ;               SP = C_sgTASK_SP_SRART + RN_TASK_IDX * C_sgTASK_SP_CAPACITY;
                     386                             ; SOURCE LINE # 77
00EE E530            387             MOV     A,RN_TASK_IDX
00F0 C4              388             SWAP    A
00F1 33              389             RLC     A
00F2 54E0            390             ANL     A,#0E0H
00F4 2480            391             ADD     A,#080H
00F6 F581            392             MOV     SP,A
                     393     ;       }
                     394                             ; SOURCE LINE # 78
00F8                 395     ?C0010:
                     396     ;       //恢复寄存器数据
                     397     ;       for(i=0x08;i<0x10;i++){                 
                     398                             ; SOURCE LINE # 80
00F8 754308          399             MOV     i,#08H
00FB                 400     ?C0011:
                     401     ;               *((uchar data*)i) = *(pTAK_RM_STK++);
                     402                             ; SOURCE LINE # 81
00FB 0533            403             INC     pTAK_RM_STK+01H
00FD E533            404             MOV     A,pTAK_RM_STK+01H
00FF AE32            405             MOV     R6,pTAK_RM_STK
0101 7002            406             JNZ     ?C0041
0103 0532            407             INC     pTAK_RM_STK
0105                 408     ?C0041:
0105 14              409             DEC     A
0106 F582            410             MOV     DPL,A
0108 8E83            411             MOV     DPH,R6
010A E0              412             MOVX    A,@DPTR
010B A843            413             MOV     R0,i
010D F6              414             MOV     @R0,A
                     415     ;       }
                     416                             ; SOURCE LINE # 82
010E 0543            417             INC     i
0110 E543            418             MOV     A,i
0112 B410E6          419             CJNE    A,#010H,?C0011
0115                 420     ?C0012:
                     421     ; 
                     422     ;       //跳转
                     423     ;       #pragma asm             
                     424     ;       MOV A,Cache_TaskEnter_L
0115 E541            425               MOV A,Cache_TaskEnter_L
                     426     ;       PUSH ACC
0117 C0E0            427               PUSH ACC
                     428     ;       MOV A,Cache_TaskEnter_H
0119 E542            429               MOV A,Cache_TaskEnter_H
                     430     ;       PUSH ACC
011B C0E0            431               PUSH ACC
                     432     ;       MOV A,17H       
011D E517            433               MOV A,17H     
                     434     ;       SETB RS0;切换寄存器组到第1区   
011F D2D3            435               SETB RS0;切换寄存器组到第1区 
                     436     ;       RET
0121 22              437               RET
0122                 438     ?C0014:
                     439     ;       #pragma endasm  
                     440     ;       while(1);
                     441                             ; SOURCE LINE # 94
0122 80FE            442             SJMP    ?C0014
                     443     ; END OF OS_taskDispatch
                     444     
                     445     ; }
                     446     ; 
                     447     ; void OS_TaskRecover(){                
                     448     
----                 449             RSEG  ?PR?OS_TaskRecover?OS
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     8

0000                 450     OS_TaskRecover:
                     451             USING   0
                     452                             ; SOURCE LINE # 97
                     453     ;       //设置JCB     
                     454     ;       p_JCB = C_JCB_START + RN_TASK_IDX * C_JCB_CAPACITY;//任务地址栈指针
                     455                             ; SOURCE LINE # 99
0000 E530            456             MOV     A,RN_TASK_IDX
0002 75F008          457             MOV     B,#08H
0005 A4              458             MUL     AB
0006 2450            459             ADD     A,#050H
0008 F534            460             MOV     p_JCB,A
                     461     ;       *p_JCB = JCB_DESTORY;   
                     462                             ; SOURCE LINE # 100
000A F8              463             MOV     R0,A
000B E4              464             CLR     A
000C F6              465             MOV     @R0,A
000D                 466     ?C0017:
                     467     ;       while(1);
                     468                             ; SOURCE LINE # 101
000D 80FE            469             SJMP    ?C0017
                     470     ; END OF OS_TaskRecover
                     471     
                     472     ; }
                     473     ; 
                     474     ; void sleep(uchar ms)   
                     475     
----                 476             RSEG  ?PR?_sleep?OS
0000                 477     _sleep:
                     478             USING   0
                     479                             ; SOURCE LINE # 104
                     480     ;---- Variable 'ms?340' assigned to Register 'R7' ----
                     481     ; {
                     482                             ; SOURCE LINE # 105
                     483     ;       unsigned char a,b,c;
                     484     ;     for(c=ms;c>0;c--)
                     485                             ; SOURCE LINE # 107
                     486     ;---- Variable 'c?343' assigned to Register 'R7' ----
0000                 487     ?C0020:
0000 EF              488             MOV     A,R7
0001 D3              489             SETB    C
0002 9400            490             SUBB    A,#00H
0004 400B            491             JC      ?C0029
                     492     ;       for(b=142;b>0;b--)
                     493                             ; SOURCE LINE # 108
                     494     ;---- Variable 'b?342' assigned to Register 'R6' ----
0006 7E8E            495             MOV     R6,#08EH
0008                 496     ?C0023:
                     497     ;         for(a=2;a>0;a--);
                     498                             ; SOURCE LINE # 109
                     499     ;---- Variable 'a?341' assigned to Register 'R5' ----
0008 7D02            500             MOV     R5,#02H
000A                 501     ?C0026:
000A DDFE            502             DJNZ    R5,?C0026
000C                 503     ?C0025:
000C DEFA            504             DJNZ    R6,?C0023
000E                 505     ?C0022:
000E 1F              506             DEC     R7
000F 80EF            507             SJMP    ?C0020
                     508     ; }
                     509                             ; SOURCE LINE # 110
0011                 510     ?C0029:
0011 22              511             RET     
                     512     ; END OF _sleep
                     513     
                     514     ; 
                     515     ; void addTask(uint task){              
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE     9

                     516     
----                 517             RSEG  ?PR?_addTask?OS
0000                 518     _addTask:
                     519             USING   0
                     520                             ; SOURCE LINE # 112
                     521     ;---- Variable 'task?444' assigned to Register 'R6/R7' ----
                     522     ;       for(p_JCB = C_JCB_START; p_JCB < C_JCB_START + C_MAX_TASK_COUNT * C_JCB_CAPACITY; p
                             _JCB += C_JCB_CAPACITY){
                     523                             ; SOURCE LINE # 113
0000 753450          524             MOV     p_JCB,#050H
0003                 525     ?C0030:
0003 E534            526             MOV     A,p_JCB
0005 C3              527             CLR     C
0006 9470            528             SUBB    A,#070H
0008 502A            529             JNC     ?C0034
                     530     ;               if(*p_JCB == JCB_DESTORY){
                     531                             ; SOURCE LINE # 114
000A A834            532             MOV     R0,p_JCB
000C E6              533             MOV     A,@R0
000D 701D            534             JNZ     ?C0032
                     535     ;                       *(p_JCB++) = JCB_BLOCK;
                     536                             ; SOURCE LINE # 115
000F AD34            537             MOV     R5,p_JCB
0011 0534            538             INC     p_JCB
0013 A805            539             MOV     R0,AR5
0015 7601            540             MOV     @R0,#01H
                     541     ;                       *(p_JCB++) = task;
                     542                             ; SOURCE LINE # 116
0017 AD07            543             MOV     R5,AR7
0019 AC34            544             MOV     R4,p_JCB
001B 0534            545             INC     p_JCB
001D A804            546             MOV     R0,AR4
001F A605            547             MOV     @R0,AR5
                     548     ;                       *(p_JCB++) = task >> 8;
                     549                             ; SOURCE LINE # 117
0021 AF06            550             MOV     R7,AR6
0023 AE34            551             MOV     R6,p_JCB
0025 0534            552             INC     p_JCB
0027 A806            553             MOV     R0,AR6
0029 A607            554             MOV     @R0,AR7
                     555     ;                       break;
                     556                             ; SOURCE LINE # 118
002B 22              557             RET     
                     558     ;               }
                     559                             ; SOURCE LINE # 119
                     560     ;       }               
                     561                             ; SOURCE LINE # 120
002C                 562     ?C0032:
002C 7408            563             MOV     A,#08H
002E 2534            564             ADD     A,p_JCB
0030 F534            565             MOV     p_JCB,A
0032 80CF            566             SJMP    ?C0030
                     567     ; }                     ; SOURCE LINE # 121
0034                 568     ?C0034:
0034 22              569             RET     
                     570     ; END OF _addTask
                     571     
                     572             END
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE    10

SYMBOL TABLE LISTING
------ ----- -------


N A M E                 T Y P E  V A L U E   ATTRIBUTES

?C0002 . . . . . . . .  C ADDR   0003H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0003 . . . . . . . .  C ADDR   0027H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0005 . . . . . . . .  C ADDR   002DH   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0006 . . . . . . . .  C ADDR   0062H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0008 . . . . . . . .  C ADDR   0058H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0009 . . . . . . . .  C ADDR   00D8H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0010 . . . . . . . .  C ADDR   00F8H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0011 . . . . . . . .  C ADDR   00FBH   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0012 . . . . . . . .  C ADDR   0115H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0014 . . . . . . . .  C ADDR   0122H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0017 . . . . . . . .  C ADDR   000DH   R   SEG=?PR?OS_TASKRECOVER?OS
?C0020 . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_SLEEP?OS
?C0022 . . . . . . . .  C ADDR   000EH   R   SEG=?PR?_SLEEP?OS
?C0023 . . . . . . . .  C ADDR   0008H   R   SEG=?PR?_SLEEP?OS
?C0025 . . . . . . . .  C ADDR   000CH   R   SEG=?PR?_SLEEP?OS
?C0026 . . . . . . . .  C ADDR   000AH   R   SEG=?PR?_SLEEP?OS
?C0029 . . . . . . . .  C ADDR   0011H   R   SEG=?PR?_SLEEP?OS
?C0030 . . . . . . . .  C ADDR   0003H   R   SEG=?PR?_ADDTASK?OS
?C0032 . . . . . . . .  C ADDR   002CH   R   SEG=?PR?_ADDTASK?OS
?C0034 . . . . . . . .  C ADDR   0034H   R   SEG=?PR?_ADDTASK?OS
?C0035 . . . . . . . .  C ADDR   0011H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0036 . . . . . . . .  C ADDR   0077H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0037 . . . . . . . .  C ADDR   0089H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0038 . . . . . . . .  C ADDR   00A4H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0039 . . . . . . . .  C ADDR   00B6H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0040 . . . . . . . .  C ADDR   00E2H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C0041 . . . . . . . .  C ADDR   0105H   R   SEG=?PR?OS_TASKDISPATCH?OS
?C?CSTPTR. . . . . . .  C ADDR   -----       EXT
?C?OFFXADD . . . . . .  C ADDR   -----       EXT
?PR?OS_MAIN?OS . . . .  C SEG    0003H       REL=UNIT
?PR?OS_TASKDISPATCH?OS  C SEG    0124H       REL=UNIT
?PR?OS_TASKRECOVER?OS.  C SEG    000FH       REL=UNIT
?PR?_ADDTASK?OS. . . .  C SEG    0035H       REL=UNIT
?PR?_SLEEP?OS. . . . .  C SEG    0012H       REL=UNIT
AC . . . . . . . . . .  B ADDR   00D0H.6 A   
ACC. . . . . . . . . .  D ADDR   00E0H   A   
ADDTASKS . . . . . . .  C ADDR   -----       EXT
AR4. . . . . . . . . .  D ADDR   0004H   A   
AR5. . . . . . . . . .  D ADDR   0005H   A   
AR6. . . . . . . . . .  D ADDR   0006H   A   
AR7. . . . . . . . . .  D ADDR   0007H   A   
B. . . . . . . . . . .  D ADDR   00F0H   A   
CACHE_ACC. . . . . . .  D ADDR   0040H   A   
CACHE_TASKENTER_H. . .  D ADDR   0042H   A   
CACHE_TASKENTER_L. . .  D ADDR   0041H   A   
CP_RL2 . . . . . . . .  B ADDR   00C8H.0 A   
CY . . . . . . . . . .  B ADDR   00D0H.7 A   
C_T2 . . . . . . . . .  B ADDR   00C8H.1 A   
DPH. . . . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . . . .  B ADDR   00A8H.7 A   
ES . . . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . . . .  B ADDR   00A8H.3 A   
ET2. . . . . . . . . .  B ADDR   00A8H.5 A   
EX0. . . . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . . . .  B ADDR   00A8H.2 A   
EXEN2. . . . . . . . .  B ADDR   00C8H.3 A   
EXF2 . . . . . . . . .  B ADDR   00C8H.6 A   
F0 . . . . . . . . . .  B ADDR   00D0H.5 A   
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE    11

I. . . . . . . . . . .  D ADDR   0043H   A   
IE . . . . . . . . . .  D ADDR   00A8H   A   
IE0. . . . . . . . . .  B ADDR   0088H.1 A   
IE1. . . . . . . . . .  B ADDR   0088H.3 A   
INT0 . . . . . . . . .  B ADDR   00B0H.2 A   
INT1 . . . . . . . . .  B ADDR   00B0H.3 A   
IP . . . . . . . . . .  D ADDR   00B8H   A   
IT0. . . . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . . . .  B ADDR   0088H.2 A   
ITRPT_COUNT. . . . . .  D ADDR   0031H   A   
OS . . . . . . . . . .  N NUMB   -----       
OS_MAIN. . . . . . . .  C ADDR   0000H   R   SEG=?PR?OS_MAIN?OS
OS_TASKDISPATCH. . . .  C ADDR   0000H   R   SEG=?PR?OS_TASKDISPATCH?OS
OS_TASKRECOVER . . . .  C ADDR   0000H   R   SEG=?PR?OS_TASKRECOVER?OS
OV . . . . . . . . . .  B ADDR   00D0H.2 A   
P. . . . . . . . . . .  B ADDR   00D0H.0 A   
P0 . . . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . . . .  D ADDR   00B0H   A   
PCON . . . . . . . . .  D ADDR   0087H   A   
PS . . . . . . . . . .  B ADDR   00B8H.4 A   
PSW. . . . . . . . . .  D ADDR   00D0H   A   
PT0. . . . . . . . . .  B ADDR   00B8H.1 A   
PT1. . . . . . . . . .  B ADDR   00B8H.3 A   
PT2. . . . . . . . . .  B ADDR   00B8H.5 A   
PTAK_RM_STK. . . . . .  D ADDR   0032H   A   
PX0. . . . . . . . . .  B ADDR   00B8H.0 A   
PX1. . . . . . . . . .  B ADDR   00B8H.2 A   
P_JCB. . . . . . . . .  D ADDR   0034H   A   
RB8. . . . . . . . . .  B ADDR   0098H.2 A   
RCAP2H . . . . . . . .  D ADDR   00CBH   A   
RCAP2L . . . . . . . .  D ADDR   00CAH   A   
RCLK . . . . . . . . .  B ADDR   00C8H.5 A   
RD . . . . . . . . . .  B ADDR   00B0H.7 A   
REN. . . . . . . . . .  B ADDR   0098H.4 A   
RI . . . . . . . . . .  B ADDR   0098H.0 A   
RN_TASK_IDX. . . . . .  D ADDR   0030H   A   
RS0. . . . . . . . . .  B ADDR   00D0H.3 A   
RS1. . . . . . . . . .  B ADDR   00D0H.4 A   
RXD. . . . . . . . . .  B ADDR   00B0H.0 A   
SBUF . . . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . . . .  D ADDR   0098H   A   
SM0. . . . . . . . . .  B ADDR   0098H.7 A   
SM1. . . . . . . . . .  B ADDR   0098H.6 A   
SM2. . . . . . . . . .  B ADDR   0098H.5 A   
SP . . . . . . . . . .  D ADDR   0081H   A   
T0 . . . . . . . . . .  B ADDR   00B0H.4 A   
T1 . . . . . . . . . .  B ADDR   00B0H.5 A   
T2 . . . . . . . . . .  B ADDR   0090H.0 A   
T2CON. . . . . . . . .  D ADDR   00C8H   A   
T2EX . . . . . . . . .  B ADDR   0090H.1 A   
TB8. . . . . . . . . .  B ADDR   0098H.3 A   
TCLK . . . . . . . . .  B ADDR   00C8H.4 A   
TCON . . . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . . . .  B ADDR   0088H.7 A   
TF2. . . . . . . . . .  B ADDR   00C8H.7 A   
TH0. . . . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . . . .  D ADDR   008DH   A   
TH2. . . . . . . . . .  D ADDR   00CDH   A   
TI . . . . . . . . . .  B ADDR   0098H.1 A   
TL0. . . . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . . . .  D ADDR   008BH   A   
TL2. . . . . . . . . .  D ADDR   00CCH   A   
TMOD . . . . . . . . .  D ADDR   0089H   A   
A51 MACRO ASSEMBLER  OS                                                                   02/19/2020 19:30:19 PAGE    12

TR0. . . . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . . . .  B ADDR   0088H.6 A   
TR2. . . . . . . . . .  B ADDR   00C8H.2 A   
TXD. . . . . . . . . .  B ADDR   00B0H.1 A   
WR . . . . . . . . . .  B ADDR   00B0H.6 A   
_ADDTASK . . . . . . .  C ADDR   0000H   R   SEG=?PR?_ADDTASK?OS
_SLEEP . . . . . . . .  C ADDR   0000H   R   SEG=?PR?_SLEEP?OS


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
